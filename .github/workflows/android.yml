name: CI/CD Android App
env:
  VERSION: '0.0.22'
on:
  push:
    branches:
      - main
    tags:
      - "v*"
jobs:
  apk:
    name: Generate APK
    needs: unit_tests
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'Website:')"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Create file
        run: touch /home/runner/work/AutoNote/AutoNote/app/google-services.json | base64
      - name: Putting data
        env:
            DATA: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: echo $DATA > /home/runner/work/AutoNote/AutoNote/app/google-services.json
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: corretto
          java-version: "11"
      - name: Set execution flag for gradlew
        run: chmod +x gradlew
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
      - name: Build AutoNote
        run: ./gradlew assembleRelease
      - name: Sign APK
        uses: r0adkll/sign-android-release@v1
        id: sign_app
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
      - name: Upload APK
        uses: actions/upload-artifact@v1
        with:
          name: apk
          path: ${{steps.sign_app.outputs.signedReleaseFile}}

  release:
    name: Release APK
    needs: apk
    runs-on: ubuntu-latest
    steps:
      - name: Download APK from build
        uses: actions/download-artifact@v1
        with:
          name: apk
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ github.event.repository.name }} v${{ env.VERSION }}
          prerelease: true
      - name: Upload Release APK
        id: upload_release_asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: apk/app-release-unsigned-signed.apk
          asset_name: ${{ github.event.repository.name }}.apk
          asset_content_type: application/apk


  deploy-firebase:
    name: Release APK to Firebase testers
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Download APK from build
        uses: actions/download-artifact@v1
        with:
          name: apk
      - name: Upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1.4.0
        with:
          appId: ${{secrets.FIREBASE_APP_ID}}
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          groups: qa
          file: apk/app-release-unsigned-signed.apk

#     name: Deploy to Play Store

# on:
#   push:
#     branches:
#       - master

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Generate Release APK
#         run: ./gradlew assembleRelease
#       - name: Sign APK
#         uses: r0adkll/sign-android-release@v1
#         # ID used to access action output
#         id: sign_app
#         with:
#           releaseDirectory: app/build/outputs/apk/release
#           signingKeyBase64: ${{ secrets.SIGNING_KEY }}
#           alias: ${{ secrets.ALIAS }}
#           keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
#           keyPassword: ${{ secrets.KEY_PASSWORD }}
#       - uses: actions/upload-artifact@master
#         with:
#           name: release.apk
#           path: ${{steps.sign_app.outputs.signedReleaseFile}}
#       - uses: actions/upload-artifact@master
#         with:
#           name: mapping.txt
#           path: app/build/outputs/mapping/release/mapping.txt

#   deploy-play-store:
#     needs: [build]
#     runs-on: ubuntu-latest
#     steps:
#       # 1
#       - uses: actions/download-artifact@master
#         with:
#           name: release.apk
#       - uses: actions/download-artifact@master
#         with:
#           name: mapping.txt
#       # 2
#       - name: Publish to Play Store internal test track
#         uses: r0adkll/upload-google-play@v1
#         with:
#           serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
#           # 3
#           packageName: com.raywenderlich.android.rwquotes
#           releaseFile: app-release-unsigned-signed.apk
#           track: internal
#           userFraction: 0.50
#           mappingFile: mapping.txt
